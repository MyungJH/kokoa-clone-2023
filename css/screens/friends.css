#friends-display-link {
	text-align: center;
	display: block;
	background-color: #fafafa;
	padding: 15px 0px;
	font-size: 18px;
	margin-bottom: 10px;
	margin-top: -15px;
}

/* icon은 텍스트라고 생각하면 됨 */
#friends-display-link i {
	color: rgba(0, 0, 0, 0.3);
	margin-left: 5px;
}

.friends-screen {
	padding: 0px var(--horizontal-space);
}

.friends-screen__channel {
	margin-top: 25px;
	border-top: var(--main-border);
	padding-top: 15px;
}

.friends-screen__channel-header {
	margin-bottom: 30px;
	display: flex;
	justify-content: space-between;
	color: var(--soft-gray);
}

@keyframes hideSplashScreen {
	from {
		opacity: 1;
	}
	to {
		opacity: 0;
		/* visibility값을 hidden으로 설정해주지 않으면, splash-screen의 opacity값은 0이기 때문에 눈으로는 존재하지 않는 것처럼 보이지만, 
			 여전히 브라우저상에는 splash-screen이 남아있는 상태이므로 만들어둔 내용을 클릭하는 것이 불가능. 
			 그러므로, visibility값을 hidden으로 설정하여 splash-screen을 숨겨줘야 클릭이 가능하게 됨.
			 다시말해, 쉽게 말하자면 visibility를 hidden으로 설정하는 것은 마우스에 걸리지 않게 요소를 빼는(?) 작업(단지 브라우저가 해당 element를 무시하도록 만드는거임). 
			 완전히 제거하는 작업이 아니므로, 브라우저 검증을 하게 되면 여전히 존재하는 요소임. 완전히 제거하거나 숨기고 싶을 때에는 Javascript를 사용하여 구현해야함.  */
		visibility: hidden;
	}
}

#splash-screen {
	position: absolute;
	background-color: var(--yellow);
	height: 100vh;
	width: 100vw;
	top: 0;
	display: flex;
	justify-content: center;
	align-items: center;
	font-size: 90px;
	/* animation의 마지막 속성값을 forwards로 지정하게되면, 마지막 속성값은 마지막 keyframes로 정해지고 애니메이션이 끝나도 유지함. */
	animation: hideSplashScreen 0.3s ease-in-out forwards;
	animation-delay: 2s;
}
